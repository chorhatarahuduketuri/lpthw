print x
This prints the following string 'x'. The string is either a variable of type string, 
or it is directly a string. Strings are encased in either " or ' characters. If the 
enclosing character is necessarily used inside the string then it must be escaped with 
an immediately preceeding \ character. It can also have variables inserted into it. 
Where in the string an indeterminate value is to be entered; a '%r' is put, a digit; 
an '%d' and '%s' for a string. In this case, after the string's enclosing " or ', a 
% is put, then inside a pair of curved brackets (), separated by commas, the variables 
whos values are to be inserted into the string in order. 

variables 
Python is dynamically typed. To declare a variable, its name is typed on a new line, 
followed by an '=' character, followed by the variables value. 
e.g. 
name = 'chor'
is a string with the value of chor. 
'\n' is  a new line, so "Hello,\nWorld!" comes out as:
Hello,
World!

functions
A function is specified by 'def' being stated on a new line, followed by the function's 
name, then curved brackets with no whitespace between the function name and the first 
bracket. Inside the brackets the names of parameters are specified, and they can be
accessed within the scope of the function. Immediately following the definition line, 
contiguous lines indented with four 'space' characters only make up the body of the 
function, which is code that is executed upon the calling of the function. 
To call a function, it's name is specified, immediately followed (with no separating 
whitespace) by curved brackets, inside which should be placed variables or values 
to be the function's parameter's values. 
the return keyword. 
The return keyword, when placed on the last line of the last line of the function and 
followed by a variable or value of some sort, causes whatever that value is to be 
inserted into that location in the code. 

Import statements 
To import a library, in contiguous lines from the start of the file:
From <location of code to import> import <what to import>
Where <location of code to import> is the '.' separated path to the code to be 
imported, e.g. 'sys' or 'os.path'
And <what to import> is the entity to be imported, 
e.g. 'argv' or 'exists'
Complete e.g.
from sys import argv
from os.path import exists

Reading in from the cli
Import argv from sys. The variable 'argv' is then available within the scope of the 
script, which is an array of length n+1 where n is the number of arguments specified 
on the cli. They are usually then assigned to variables in following fashion: 
e.g. 
script, from_file, to_file = argv
Where script is the name of the script e.g. read_write_file.py
from_file and to_file are the names of files. 
During the execution of the script, more data can also be requested from the user via
cli input by calling the 'raw_input' function, as follows:
name = raw_input()
Where 'name' is a variable whos value will be whatever the user types in when prompted. 
The prompt symbol can be set arbitrarily by providing it as a string paramter to 
raw_input, e.g.
raw_input('-->')
Will cause the user to see --> as the cli prompt. 

File IO
To input to and output from a file, you must first acquire it's name (cli parameter, 
hard coded variable, etc.)
To open a file: 
<variable name> = open(<file name>)
Where <variable name> is instantiated as a variable of type File and <from file> is 
the name of the file, 
e.g. input = open(from_file)
To read a file:
<variable name> = input.read()
Where <variable name> becomes a string containing the file's contents. 
e.g. indata = input.read()
To write to a file: 
The same as opening it, but with an extra parameter 'w' (for Write).
<variable name> = open(<file_name>, 'w')
Where <variable name> is a variable of type File to be written to in the script, 
and <file_name> is the file on disk to that is being edited. 
e.g.
output = open(to_file, 'w')
Then, to write to a file, call the File's 'write' function, like this: 
output.write(<data>)
Where <data> is the data to be written to the file, such as a string. 
e.g.
output.write(indata)
After writing to the file, it is important to close it, so that nothing fails to be 
written and the computer memory is freed. Files are close like this: 
output.close()
input.close()
Anything that gets 'open'ed should be 'close'd, so both the 'input' and the 'output' 
should be closed. 


==
equality 
this is the comparitor symbol of a statement, which will return true if the variables
on either side of the symbol are equivalent

!=
inequality
this is the comparitor symbol of a statement, which will return true if the variable 
on either side of the symbol are not equivalent

= 
assignment 
this symbol sets the variable to the left of the symbol to hold the value of the symbol
to the right of the variable. 

